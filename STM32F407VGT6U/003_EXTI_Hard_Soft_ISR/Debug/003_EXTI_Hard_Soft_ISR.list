
003_EXTI_Hard_Soft_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001420  08001420  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001420  08001420  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001420  08001420  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001420  08001420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001424  08001424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  0800148c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800148c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043aa  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ac9  00000000  00000000  00024438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00024f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000250b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003352  00000000  00000000  00025210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002397  00000000  00000000  00028562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a960  00000000  00000000  0002a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00035259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c18  00000000  00000000  000352ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800138c 	.word	0x0800138c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	0800138c 	.word	0x0800138c

080001e8 <main>:

uint32_t state = 0;


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b08a      	sub	sp, #40	; 0x28
 80001ec:	af00      	add	r7, sp, #0
	GPIOD_PCLK_EN();
 80001ee:	4b2e      	ldr	r3, [pc, #184]	; (80002a8 <main+0xc0>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	4a2d      	ldr	r2, [pc, #180]	; (80002a8 <main+0xc0>)
 80001f4:	f043 0308 	orr.w	r3, r3, #8
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_InitTypeDef LED14;

	EXTI_InitTypeDef BtnD10;
	EXTI_InitTypeDef BtnD11;

	printf("--- Program start ---\n");
 80001fa:	482c      	ldr	r0, [pc, #176]	; (80002ac <main+0xc4>)
 80001fc:	f000 fc70 	bl	8000ae0 <puts>

	LED13.GPIO_Pin = Pin13;
 8000200:	230d      	movs	r3, #13
 8000202:	61bb      	str	r3, [r7, #24]
	LED13.GPIOx_Moder = GPIO_Mode_OUT;
 8000204:	2301      	movs	r3, #1
 8000206:	773b      	strb	r3, [r7, #28]
	LED13.GPIOx_OTyper = GPIO_OType_PP;
 8000208:	2300      	movs	r3, #0
 800020a:	777b      	strb	r3, [r7, #29]
	LED13.GPIOx_OSpeedr = GPIO_Medium_Speed;
 800020c:	2301      	movs	r3, #1
 800020e:	77bb      	strb	r3, [r7, #30]
	LED13.GPIOx_PuPdR = GPIO_PuPd_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOD, &LED13);
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4619      	mov	r1, r3
 800021a:	4825      	ldr	r0, [pc, #148]	; (80002b0 <main+0xc8>)
 800021c:	f000 fa1e 	bl	800065c <GPIO_Init>

	LED14.GPIO_Pin = Pin14;
 8000220:	230e      	movs	r3, #14
 8000222:	613b      	str	r3, [r7, #16]
	LED14.GPIOx_Moder = GPIO_Mode_OUT;
 8000224:	2301      	movs	r3, #1
 8000226:	753b      	strb	r3, [r7, #20]
	LED14.GPIOx_OTyper = GPIO_OType_PP;
 8000228:	2300      	movs	r3, #0
 800022a:	757b      	strb	r3, [r7, #21]
	LED14.GPIOx_OSpeedr = GPIO_Medium_Speed;
 800022c:	2301      	movs	r3, #1
 800022e:	75bb      	strb	r3, [r7, #22]
	LED14.GPIOx_PuPdR = GPIO_PuPd_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOD, &LED14);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	481d      	ldr	r0, [pc, #116]	; (80002b0 <main+0xc8>)
 800023c:	f000 fa0e 	bl	800065c <GPIO_Init>


	BtnD10.EXTI_Line = EXTI_Line10;
 8000240:	230a      	movs	r3, #10
 8000242:	60bb      	str	r3, [r7, #8]
	BtnD10.EXTI_Trigger = GPIO_Mode_IT_FT;
 8000244:	2301      	movs	r3, #1
 8000246:	737b      	strb	r3, [r7, #13]
	EXTI_Init(GPIOD, &BtnD10);
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	4619      	mov	r1, r3
 800024e:	4818      	ldr	r0, [pc, #96]	; (80002b0 <main+0xc8>)
 8000250:	f000 f858 	bl	8000304 <EXTI_Init>

	BtnD11.EXTI_Line = EXTI_Line11;
 8000254:	230b      	movs	r3, #11
 8000256:	603b      	str	r3, [r7, #0]
	BtnD11.EXTI_Trigger = GPIO_Mode_IT_FT;
 8000258:	2301      	movs	r3, #1
 800025a:	717b      	strb	r3, [r7, #5]
	EXTI_Init(GPIOD, &BtnD11);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <main+0xc8>)
 8000262:	f000 f84f 	bl	8000304 <EXTI_Init>

	// IRQ configurations
	EXTI_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000266:	2101      	movs	r1, #1
 8000268:	2028      	movs	r0, #40	; 0x28
 800026a:	f000 f933 	bl	80004d4 <EXTI_IRQInterruptConfig>
	EXTI_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRIO1);
 800026e:	2101      	movs	r1, #1
 8000270:	2028      	movs	r0, #40	; 0x28
 8000272:	f000 f9b3 	bl	80005dc <EXTI_IRQPriorityConfig>


	for(int i = 0; i < 3; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	627b      	str	r3, [r7, #36]	; 0x24
 800027a:	e005      	b.n	8000288 <main+0xa0>
		EXTI_GenerateSWInterrupt(EXTI_Line10);
 800027c:	200a      	movs	r0, #10
 800027e:	f000 f913 	bl	80004a8 <EXTI_GenerateSWInterrupt>
	for(int i = 0; i < 3; i++)
 8000282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000284:	3301      	adds	r3, #1
 8000286:	627b      	str	r3, [r7, #36]	; 0x24
 8000288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028a:	2b02      	cmp	r3, #2
 800028c:	ddf6      	ble.n	800027c <main+0x94>

	for(int i = 0; i < 3; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	623b      	str	r3, [r7, #32]
 8000292:	e005      	b.n	80002a0 <main+0xb8>
		EXTI_GenerateSWInterrupt(EXTI_Line11);
 8000294:	200b      	movs	r0, #11
 8000296:	f000 f907 	bl	80004a8 <EXTI_GenerateSWInterrupt>
	for(int i = 0; i < 3; i++)
 800029a:	6a3b      	ldr	r3, [r7, #32]
 800029c:	3301      	adds	r3, #1
 800029e:	623b      	str	r3, [r7, #32]
 80002a0:	6a3b      	ldr	r3, [r7, #32]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	ddf6      	ble.n	8000294 <main+0xac>


	while(1);
 80002a6:	e7fe      	b.n	80002a6 <main+0xbe>
 80002a8:	40023800 	.word	0x40023800
 80002ac:	080013a4 	.word	0x080013a4
 80002b0:	40020c00 	.word	0x40020c00

080002b4 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & ( 1 << EXTI_Line10))		// Is selected trigger request occurred?
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d009      	beq.n	80002d8 <EXTI15_10_IRQHandler+0x24>
	{
		// printf("Im 1. IF-Fall \n");
		GPIO_ToggleBit(GPIOD, Pin13);
 80002c4:	210d      	movs	r1, #13
 80002c6:	480e      	ldr	r0, [pc, #56]	; (8000300 <EXTI15_10_IRQHandler+0x4c>)
 80002c8:	f000 fa65 	bl	8000796 <GPIO_ToggleBit>

		EXTI->PR |= (1 << EXTI_Line10); 	// Clear pending register
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6153      	str	r3, [r2, #20]
	}

	if(EXTI->PR & ( 1 << EXTI_Line11))		// Is selected trigger request occurred?
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <EXTI15_10_IRQHandler+0x44>
	{
		// printf("Im 2. IF-Fall \n");
		GPIO_ToggleBit(GPIOD, Pin14);
 80002e4:	210e      	movs	r1, #14
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <EXTI15_10_IRQHandler+0x4c>)
 80002e8:	f000 fa55 	bl	8000796 <GPIO_ToggleBit>
		EXTI->PR |= (1 << EXTI_Line11); 	// Clear pending register
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a02      	ldr	r2, [pc, #8]	; (80002fc <EXTI15_10_IRQHandler+0x48>)
 80002f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f6:	6153      	str	r3, [r2, #20]
	//	debounce();
	//	GPIO_SetBit(GPIOA, Pin1);
	//
	//	counter2 += 17;
	//}
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40013c00 	.word	0x40013c00
 8000300:	40020c00 	.word	0x40020c00

08000304 <EXTI_Init>:

/**
 * @brief
 */
void EXTI_Init(GPIO_RegDef_t* GPIOx, EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]

	if((uint32_t)EXTI_InitStruct->EXTI_Trigger == GPIO_Mode_IT_FT)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	795b      	ldrb	r3, [r3, #5]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d117      	bne.n	8000346 <EXTI_Init+0x42>
	{
		// 12.3.4 Falling trigger selection register (EXTI_FTSR)

		EXTI->FTSR |= (0x01 << (EXTI_InitStruct->EXTI_Line));
 8000316:	4b58      	ldr	r3, [pc, #352]	; (8000478 <EXTI_Init+0x174>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	2101      	movs	r1, #1
 8000320:	fa01 f202 	lsl.w	r2, r1, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a54      	ldr	r2, [pc, #336]	; (8000478 <EXTI_Init+0x174>)
 8000328:	430b      	orrs	r3, r1
 800032a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0x01 << (EXTI_InitStruct->EXTI_Line));
 800032c:	4b52      	ldr	r3, [pc, #328]	; (8000478 <EXTI_Init+0x174>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	2101      	movs	r1, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	43d2      	mvns	r2, r2
 800033c:	4611      	mov	r1, r2
 800033e:	4a4e      	ldr	r2, [pc, #312]	; (8000478 <EXTI_Init+0x174>)
 8000340:	400b      	ands	r3, r1
 8000342:	6093      	str	r3, [r2, #8]
 8000344:	e035      	b.n	80003b2 <EXTI_Init+0xae>

	}
	else if((uint32_t)EXTI_InitStruct->EXTI_Trigger == GPIO_Mode_IT_RT)
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	795b      	ldrb	r3, [r3, #5]
 800034a:	2b02      	cmp	r3, #2
 800034c:	d117      	bne.n	800037e <EXTI_Init+0x7a>
	{
		// 12.3.3 Rising trigger selection register (EXTI_RTSR)

		EXTI->RTSR |= (0x01 << (EXTI_InitStruct->EXTI_Line));
 800034e:	4b4a      	ldr	r3, [pc, #296]	; (8000478 <EXTI_Init+0x174>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	6812      	ldr	r2, [r2, #0]
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a46      	ldr	r2, [pc, #280]	; (8000478 <EXTI_Init+0x174>)
 8000360:	430b      	orrs	r3, r1
 8000362:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(0x01 << (EXTI_InitStruct->EXTI_Line));
 8000364:	4b44      	ldr	r3, [pc, #272]	; (8000478 <EXTI_Init+0x174>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	6812      	ldr	r2, [r2, #0]
 800036c:	2101      	movs	r1, #1
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a40      	ldr	r2, [pc, #256]	; (8000478 <EXTI_Init+0x174>)
 8000378:	400b      	ands	r3, r1
 800037a:	60d3      	str	r3, [r2, #12]
 800037c:	e019      	b.n	80003b2 <EXTI_Init+0xae>
	}
	else if((uint32_t)EXTI_InitStruct->EXTI_Trigger == GPIO_Mode_IT_RFT)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	2b03      	cmp	r3, #3
 8000384:	d115      	bne.n	80003b2 <EXTI_Init+0xae>
	{
		// 1. Configure both FTSR and RTSR
		EXTI->RTSR |= (0x01 << (EXTI_InitStruct->EXTI_Line));
 8000386:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <EXTI_Init+0x174>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a38      	ldr	r2, [pc, #224]	; (8000478 <EXTI_Init+0x174>)
 8000398:	430b      	orrs	r3, r1
 800039a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0x01 << (EXTI_InitStruct->EXTI_Line));
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <EXTI_Init+0x174>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	6812      	ldr	r2, [r2, #0]
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a32      	ldr	r2, [pc, #200]	; (8000478 <EXTI_Init+0x174>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	60d3      	str	r3, [r2, #12]
	}

	uint8_t temp1, temp2;

	// 2. Configure the GPIO port selection in SYSCFG_EXTICR
	temp1 = EXTI_InitStruct->EXTI_Line / 4;
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	089b      	lsrs	r3, r3, #2
 80003b8:	73fb      	strb	r3, [r7, #15]
	temp2 = EXTI_InitStruct->EXTI_Line % 4;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0303 	and.w	r3, r3, #3
 80003c4:	73bb      	strb	r3, [r7, #14]

	uint8_t portcode = GPIO_BASEADDR_TO_CODE(GPIOx);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a2c      	ldr	r2, [pc, #176]	; (800047c <EXTI_Init+0x178>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d031      	beq.n	8000432 <EXTI_Init+0x12e>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <EXTI_Init+0x17c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d02b      	beq.n	800042e <EXTI_Init+0x12a>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <EXTI_Init+0x180>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d025      	beq.n	800042a <EXTI_Init+0x126>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a29      	ldr	r2, [pc, #164]	; (8000488 <EXTI_Init+0x184>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d01f      	beq.n	8000426 <EXTI_Init+0x122>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a28      	ldr	r2, [pc, #160]	; (800048c <EXTI_Init+0x188>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d019      	beq.n	8000422 <EXTI_Init+0x11e>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a27      	ldr	r2, [pc, #156]	; (8000490 <EXTI_Init+0x18c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d013      	beq.n	800041e <EXTI_Init+0x11a>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a26      	ldr	r2, [pc, #152]	; (8000494 <EXTI_Init+0x190>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d00d      	beq.n	800041a <EXTI_Init+0x116>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a25      	ldr	r2, [pc, #148]	; (8000498 <EXTI_Init+0x194>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d007      	beq.n	8000416 <EXTI_Init+0x112>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a24      	ldr	r2, [pc, #144]	; (800049c <EXTI_Init+0x198>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d101      	bne.n	8000412 <EXTI_Init+0x10e>
 800040e:	2308      	movs	r3, #8
 8000410:	e010      	b.n	8000434 <EXTI_Init+0x130>
 8000412:	2300      	movs	r3, #0
 8000414:	e00e      	b.n	8000434 <EXTI_Init+0x130>
 8000416:	2307      	movs	r3, #7
 8000418:	e00c      	b.n	8000434 <EXTI_Init+0x130>
 800041a:	2306      	movs	r3, #6
 800041c:	e00a      	b.n	8000434 <EXTI_Init+0x130>
 800041e:	2305      	movs	r3, #5
 8000420:	e008      	b.n	8000434 <EXTI_Init+0x130>
 8000422:	2304      	movs	r3, #4
 8000424:	e006      	b.n	8000434 <EXTI_Init+0x130>
 8000426:	2303      	movs	r3, #3
 8000428:	e004      	b.n	8000434 <EXTI_Init+0x130>
 800042a:	2302      	movs	r3, #2
 800042c:	e002      	b.n	8000434 <EXTI_Init+0x130>
 800042e:	2301      	movs	r3, #1
 8000430:	e000      	b.n	8000434 <EXTI_Init+0x130>
 8000432:	2300      	movs	r3, #0
 8000434:	737b      	strb	r3, [r7, #13]

	// 7.3.14 RCC APB2 peripheral clock enable register (RCC_APB2ENR)
	SYSCFG_PCLK_EN();
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <EXTI_Init+0x19c>)
 8000438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043a:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <EXTI_Init+0x19c>)
 800043c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000440:	6453      	str	r3, [r2, #68]	; 0x44

	SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4 );
 8000442:	7b7a      	ldrb	r2, [r7, #13]
 8000444:	7bbb      	ldrb	r3, [r7, #14]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	fa02 f103 	lsl.w	r1, r2, r3
 800044c:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <EXTI_Init+0x1a0>)
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	3302      	adds	r3, #2
 8000452:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// 3. Enable the EXTI interrupt delivery using IMR -> // 12.3.1 Interrupt mask register (EXTI_IMR)
	// 0: Interrupt request from line x is masked
	// 1: Interrupt request from line x is not masked
	EXTI->IMR |= (0x01 << (EXTI_InitStruct->EXTI_Line));
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <EXTI_Init+0x174>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	6812      	ldr	r2, [r2, #0]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a04      	ldr	r2, [pc, #16]	; (8000478 <EXTI_Init+0x174>)
 8000468:	430b      	orrs	r3, r1
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40013c00 	.word	0x40013c00
 800047c:	40020000 	.word	0x40020000
 8000480:	40020400 	.word	0x40020400
 8000484:	40020800 	.word	0x40020800
 8000488:	40020c00 	.word	0x40020c00
 800048c:	40021000 	.word	0x40021000
 8000490:	40021400 	.word	0x40021400
 8000494:	40021800 	.word	0x40021800
 8000498:	40021c00 	.word	0x40021c00
 800049c:	40022000 	.word	0x40022000
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40013800 	.word	0x40013800

080004a8 <EXTI_GenerateSWInterrupt>:
/* Initialization and Configuration functions *********************************/
/**
 * @brief
 */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	// 12.3.5 Software interrupt event register (EXTI_SWIER)
	EXTI->SWIER |= (1 << EXTI_Line);
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <EXTI_GenerateSWInterrupt+0x28>)
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	2101      	movs	r1, #1
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI_GenerateSWInterrupt+0x28>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	6113      	str	r3, [r2, #16]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40013c00 	.word	0x40013c00

080004d4 <EXTI_IRQInterruptConfig>:
 * @brief In in Cortex-M4 Devices - 4.2 Nested Vectored Interrupt Controller
 * @brief In RM0090 - Table 61. Vector table for STM32F405xx/07xx and STM32F415xx/17xx
 *
 */
void EXTI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
	if(EnOrDi == ENABLE)
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d133      	bne.n	8000552 <EXTI_IRQInterruptConfig+0x7e>
	{
		// Interrupt Set-enable Registers on page 4-4
		if(IRQNumber <= 31)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b1f      	cmp	r3, #31
 80004ee:	d80a      	bhi.n	8000506 <EXTI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <EXTI_IRQInterruptConfig+0xf0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a31      	ldr	r2, [pc, #196]	; (80005c4 <EXTI_IRQInterruptConfig+0xf0>)
 8000500:	430b      	orrs	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
		{
			// -"- ICER2
			*ICER2 |= (1 << IRQNumber% 64);
		}
	}
}
 8000504:	e059      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b1f      	cmp	r3, #31
 800050a:	d90f      	bls.n	800052c <EXTI_IRQInterruptConfig+0x58>
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b3f      	cmp	r3, #63	; 0x3f
 8000510:	d80c      	bhi.n	800052c <EXTI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );	// TODO: Hier wird zum ersten Mal ein Interrupt gefordert... Why?
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <EXTI_IRQInterruptConfig+0xf4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	79fa      	ldrb	r2, [r7, #7]
 8000518:	f002 021f 	and.w	r2, r2, #31
 800051c:	2101      	movs	r1, #1
 800051e:	fa01 f202 	lsl.w	r2, r1, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <EXTI_IRQInterruptConfig+0xf4>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e046      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b3f      	cmp	r3, #63	; 0x3f
 8000530:	d943      	bls.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b5f      	cmp	r3, #95	; 0x5f
 8000536:	d840      	bhi.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <EXTI_IRQInterruptConfig+0xf8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	79fa      	ldrb	r2, [r7, #7]
 800053e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <EXTI_IRQInterruptConfig+0xf8>)
 800054c:	430b      	orrs	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	e033      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b1f      	cmp	r3, #31
 8000556:	d80a      	bhi.n	800056e <EXTI_IRQInterruptConfig+0x9a>
			*ICER0 |= (1 << IRQNumber);
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <EXTI_IRQInterruptConfig+0xfc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <EXTI_IRQInterruptConfig+0xfc>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	e025      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 32 && IRQNumber <= 63)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b1f      	cmp	r3, #31
 8000572:	d90f      	bls.n	8000594 <EXTI_IRQInterruptConfig+0xc0>
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b3f      	cmp	r3, #63	; 0x3f
 8000578:	d80c      	bhi.n	8000594 <EXTI_IRQInterruptConfig+0xc0>
			*ICER1 |= (1 << IRQNumber % 32);
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <EXTI_IRQInterruptConfig+0x100>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	f002 021f 	and.w	r2, r2, #31
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <EXTI_IRQInterruptConfig+0x100>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e012      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b3f      	cmp	r3, #63	; 0x3f
 8000598:	d90f      	bls.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b5f      	cmp	r3, #95	; 0x5f
 800059e:	d80c      	bhi.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
			*ICER2 |= (1 << IRQNumber% 64);
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <EXTI_IRQInterruptConfig+0x104>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <EXTI_IRQInterruptConfig+0x104>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	e7ff      	b.n	80005ba <EXTI_IRQInterruptConfig+0xe6>
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000e104 	.word	0xe000e104
 80005cc:	e000e108 	.word	0xe000e108
 80005d0:	e000e180 	.word	0xe000e180
 80005d4:	e000e184 	.word	0xe000e184
 80005d8:	e000e188 	.word	0xe000e188

080005dc <EXTI_IRQPriorityConfig>:

/**
 * @brief Interrupt Priority Registers on page 4-7
 */
void EXTI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	// 1. Find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	089b      	lsrs	r3, r3, #2
 80005ec:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;									// One register has 4 Sections with 8 bits
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 0303 	and.w	r3, r3, #3
 80005f4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	3304      	adds	r3, #4
 80005fe:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx ) |= (IRQPriority << shift_amount);	// Interrupt priority register
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000608:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	7b7b      	ldrb	r3, [r7, #13]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	409a      	lsls	r2, r3
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800061c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000620:	430a      	orrs	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
	...

08000630 <wait>:

/**
 * @brief Let the MC doing stuff
 */
void wait()
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 100000; i++);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e002      	b.n	8000642 <wait+0x12>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <wait+0x28>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d9f8      	bls.n	800063c <wait+0xc>
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	0001869f 	.word	0x0001869f

0800065c <GPIO_Init>:

/**
 * @brief Initialize GPIO Mode, OType, OSpeed, PuPd
 */
void GPIO_Init(GPIO_RegDef_t* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	// 8.4.1 GPIO port mode register (GPIOx_MODER)
	GPIOx->MODER &= ~(0x03 << (GPIO_InitStruct->GPIO_Pin * 2));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	43d2      	mvns	r2, r2
 8000678:	401a      	ands	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIOx_Moder) << (GPIO_InitStruct->GPIO_Pin * 2));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	4619      	mov	r1, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	431a      	orrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]

	// 8.4.2 GPIO port output type register (GPIOx_OTYPER)
	GPIOx->OTYPER &= ~(0x01 << (GPIO_InitStruct->GPIO_Pin));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	6812      	ldr	r2, [r2, #0]
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	401a      	ands	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
	GPIOx->OTYPER |= (((uint32_t)GPIO_InitStruct->GPIOx_OTyper) << (GPIO_InitStruct->GPIO_Pin));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	4619      	mov	r1, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	605a      	str	r2, [r3, #4]

	// 8.4.3 GPIO port output speed register (GPIOx_OSPEEDR)
	GPIOx->OSPEEDR &= ~(0x03 << (GPIO_InitStruct->GPIO_Pin * 2));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	2103      	movs	r1, #3
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (((uint32_t)GPIO_InitStruct->GPIOx_OSpeedr) << (GPIO_InitStruct->GPIO_Pin * 2));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	4619      	mov	r1, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	609a      	str	r2, [r3, #8]

	// 8.4.4 GPIO port pull-up/pull-down register (GPIOx_PUPDR)
	GPIOx->PUPDR &= ~(0x03 << (GPIO_InitStruct->GPIO_Pin * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	43d2      	mvns	r2, r2
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIOx_PuPdR) << (GPIO_InitStruct->GPIO_Pin * 2));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]

	if((uint32_t)GPIO_InitStruct->GPIOx_Moder == GPIO_Mode_AF)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d12c      	bne.n	800078c <GPIO_Init+0x130>
		// 8.4.10 GPIO alternate function high register (GPIOx_AFRH)

		// datasheet_STM32F407xx -> Table 9. Alternate function mapping
		uint8_t temp1, temp2;

		temp1 = GPIO_InitStruct->GPIO_Pin / 8;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	73fb      	strb	r3, [r7, #15]
		temp2 = GPIO_InitStruct->GPIO_Pin % 8;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0307 	and.w	r3, r3, #7
 8000744:	73bb      	strb	r3, [r7, #14]

		GPIOx->AFR[temp1] &= ~(0xf << (4 * temp2));
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3208      	adds	r2, #8
 800074c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000750:	7bba      	ldrb	r2, [r7, #14]
 8000752:	0092      	lsls	r2, r2, #2
 8000754:	210f      	movs	r1, #15
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	43d2      	mvns	r2, r2
 800075c:	4611      	mov	r1, r2
 800075e:	7bfa      	ldrb	r2, [r7, #15]
 8000760:	4019      	ands	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3208      	adds	r2, #8
 8000766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIOx->AFR[temp1] |= GPIO_Mode_AF << (4 * temp2);
 800076a:	7bfa      	ldrb	r2, [r7, #15]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3208      	adds	r2, #8
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	7bba      	ldrb	r2, [r7, #14]
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	2102      	movs	r1, #2
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	4611      	mov	r1, r2
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	4319      	orrs	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3208      	adds	r2, #8
 8000788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <GPIO_ToggleBit>:

/**
 * @brief Toggle GPIO_Pin
 */
void GPIO_ToggleBit(GPIO_RegDef_t* GPIOx, uint16_t GPIO_Pin)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (0x01 << GPIO_Pin);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	405a      	eors	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	615a      	str	r2, [r3, #20]
	wait();
 80007b4:	f7ff ff3c 	bl	8000630 <wait>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <ITM_SendChar+0x44>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <ITM_SendChar+0x44>)
 80007d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <ITM_SendChar+0x48>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <ITM_SendChar+0x48>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007e2:	bf00      	nop
 80007e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	e000edfc 	.word	0xe000edfc
 8000808:	e0000e00 	.word	0xe0000e00

0800080c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
		//*ptr++ = ITM_ReceiveChar();
	}

return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffad 	bl	80007c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
	}
	return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a4:	605a      	str	r2, [r3, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <_isatty>:

int _isatty(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f000 f846 	bl	80009a0 <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20020000 	.word	0x20020000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000080 	.word	0x20000080
 8000948:	200000a0 	.word	0x200000a0

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 f817 	bl	80009ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc33 	bl	80001e8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000990:	08001428 	.word	0x08001428
  ldr r2, =_sbss
 8000994:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000998:	2000009c 	.word	0x2000009c

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <__errno>:
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <__errno+0x8>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000

080009ac <__libc_init_array>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	4d0d      	ldr	r5, [pc, #52]	; (80009e4 <__libc_init_array+0x38>)
 80009b0:	4c0d      	ldr	r4, [pc, #52]	; (80009e8 <__libc_init_array+0x3c>)
 80009b2:	1b64      	subs	r4, r4, r5
 80009b4:	10a4      	asrs	r4, r4, #2
 80009b6:	2600      	movs	r6, #0
 80009b8:	42a6      	cmp	r6, r4
 80009ba:	d109      	bne.n	80009d0 <__libc_init_array+0x24>
 80009bc:	4d0b      	ldr	r5, [pc, #44]	; (80009ec <__libc_init_array+0x40>)
 80009be:	4c0c      	ldr	r4, [pc, #48]	; (80009f0 <__libc_init_array+0x44>)
 80009c0:	f000 fce4 	bl	800138c <_init>
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	2600      	movs	r6, #0
 80009ca:	42a6      	cmp	r6, r4
 80009cc:	d105      	bne.n	80009da <__libc_init_array+0x2e>
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d4:	4798      	blx	r3
 80009d6:	3601      	adds	r6, #1
 80009d8:	e7ee      	b.n	80009b8 <__libc_init_array+0xc>
 80009da:	f855 3b04 	ldr.w	r3, [r5], #4
 80009de:	4798      	blx	r3
 80009e0:	3601      	adds	r6, #1
 80009e2:	e7f2      	b.n	80009ca <__libc_init_array+0x1e>
 80009e4:	08001420 	.word	0x08001420
 80009e8:	08001420 	.word	0x08001420
 80009ec:	08001420 	.word	0x08001420
 80009f0:	08001424 	.word	0x08001424

080009f4 <memset>:
 80009f4:	4402      	add	r2, r0
 80009f6:	4603      	mov	r3, r0
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d100      	bne.n	80009fe <memset+0xa>
 80009fc:	4770      	bx	lr
 80009fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000a02:	e7f9      	b.n	80009f8 <memset+0x4>

08000a04 <_puts_r>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	460e      	mov	r6, r1
 8000a08:	4605      	mov	r5, r0
 8000a0a:	b118      	cbz	r0, 8000a14 <_puts_r+0x10>
 8000a0c:	6983      	ldr	r3, [r0, #24]
 8000a0e:	b90b      	cbnz	r3, 8000a14 <_puts_r+0x10>
 8000a10:	f000 fa48 	bl	8000ea4 <__sinit>
 8000a14:	69ab      	ldr	r3, [r5, #24]
 8000a16:	68ac      	ldr	r4, [r5, #8]
 8000a18:	b913      	cbnz	r3, 8000a20 <_puts_r+0x1c>
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 fa42 	bl	8000ea4 <__sinit>
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <_puts_r+0xd0>)
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d120      	bne.n	8000a68 <_puts_r+0x64>
 8000a26:	686c      	ldr	r4, [r5, #4]
 8000a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a2a:	07db      	lsls	r3, r3, #31
 8000a2c:	d405      	bmi.n	8000a3a <_puts_r+0x36>
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	0598      	lsls	r0, r3, #22
 8000a32:	d402      	bmi.n	8000a3a <_puts_r+0x36>
 8000a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a36:	f000 fad3 	bl	8000fe0 <__retarget_lock_acquire_recursive>
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	0719      	lsls	r1, r3, #28
 8000a3e:	d51d      	bpl.n	8000a7c <_puts_r+0x78>
 8000a40:	6923      	ldr	r3, [r4, #16]
 8000a42:	b1db      	cbz	r3, 8000a7c <_puts_r+0x78>
 8000a44:	3e01      	subs	r6, #1
 8000a46:	68a3      	ldr	r3, [r4, #8]
 8000a48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	bb39      	cbnz	r1, 8000aa2 <_puts_r+0x9e>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da38      	bge.n	8000ac8 <_puts_r+0xc4>
 8000a56:	4622      	mov	r2, r4
 8000a58:	210a      	movs	r1, #10
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f000 f848 	bl	8000af0 <__swbuf_r>
 8000a60:	3001      	adds	r0, #1
 8000a62:	d011      	beq.n	8000a88 <_puts_r+0x84>
 8000a64:	250a      	movs	r5, #10
 8000a66:	e011      	b.n	8000a8c <_puts_r+0x88>
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <_puts_r+0xd4>)
 8000a6a:	429c      	cmp	r4, r3
 8000a6c:	d101      	bne.n	8000a72 <_puts_r+0x6e>
 8000a6e:	68ac      	ldr	r4, [r5, #8]
 8000a70:	e7da      	b.n	8000a28 <_puts_r+0x24>
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <_puts_r+0xd8>)
 8000a74:	429c      	cmp	r4, r3
 8000a76:	bf08      	it	eq
 8000a78:	68ec      	ldreq	r4, [r5, #12]
 8000a7a:	e7d5      	b.n	8000a28 <_puts_r+0x24>
 8000a7c:	4621      	mov	r1, r4
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 f888 	bl	8000b94 <__swsetup_r>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d0dd      	beq.n	8000a44 <_puts_r+0x40>
 8000a88:	f04f 35ff 	mov.w	r5, #4294967295
 8000a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a8e:	07da      	lsls	r2, r3, #31
 8000a90:	d405      	bmi.n	8000a9e <_puts_r+0x9a>
 8000a92:	89a3      	ldrh	r3, [r4, #12]
 8000a94:	059b      	lsls	r3, r3, #22
 8000a96:	d402      	bmi.n	8000a9e <_puts_r+0x9a>
 8000a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9a:	f000 faa2 	bl	8000fe2 <__retarget_lock_release_recursive>
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da04      	bge.n	8000ab0 <_puts_r+0xac>
 8000aa6:	69a2      	ldr	r2, [r4, #24]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dc06      	bgt.n	8000aba <_puts_r+0xb6>
 8000aac:	290a      	cmp	r1, #10
 8000aae:	d004      	beq.n	8000aba <_puts_r+0xb6>
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	6022      	str	r2, [r4, #0]
 8000ab6:	7019      	strb	r1, [r3, #0]
 8000ab8:	e7c5      	b.n	8000a46 <_puts_r+0x42>
 8000aba:	4622      	mov	r2, r4
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 f817 	bl	8000af0 <__swbuf_r>
 8000ac2:	3001      	adds	r0, #1
 8000ac4:	d1bf      	bne.n	8000a46 <_puts_r+0x42>
 8000ac6:	e7df      	b.n	8000a88 <_puts_r+0x84>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	250a      	movs	r5, #10
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	6022      	str	r2, [r4, #0]
 8000ad0:	701d      	strb	r5, [r3, #0]
 8000ad2:	e7db      	b.n	8000a8c <_puts_r+0x88>
 8000ad4:	080013e0 	.word	0x080013e0
 8000ad8:	08001400 	.word	0x08001400
 8000adc:	080013c0 	.word	0x080013c0

08000ae0 <puts>:
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <puts+0xc>)
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f7ff bf8d 	b.w	8000a04 <_puts_r>
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000

08000af0 <__swbuf_r>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	460e      	mov	r6, r1
 8000af4:	4614      	mov	r4, r2
 8000af6:	4605      	mov	r5, r0
 8000af8:	b118      	cbz	r0, 8000b02 <__swbuf_r+0x12>
 8000afa:	6983      	ldr	r3, [r0, #24]
 8000afc:	b90b      	cbnz	r3, 8000b02 <__swbuf_r+0x12>
 8000afe:	f000 f9d1 	bl	8000ea4 <__sinit>
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <__swbuf_r+0x98>)
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d12b      	bne.n	8000b60 <__swbuf_r+0x70>
 8000b08:	686c      	ldr	r4, [r5, #4]
 8000b0a:	69a3      	ldr	r3, [r4, #24]
 8000b0c:	60a3      	str	r3, [r4, #8]
 8000b0e:	89a3      	ldrh	r3, [r4, #12]
 8000b10:	071a      	lsls	r2, r3, #28
 8000b12:	d52f      	bpl.n	8000b74 <__swbuf_r+0x84>
 8000b14:	6923      	ldr	r3, [r4, #16]
 8000b16:	b36b      	cbz	r3, 8000b74 <__swbuf_r+0x84>
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	6820      	ldr	r0, [r4, #0]
 8000b1c:	1ac0      	subs	r0, r0, r3
 8000b1e:	6963      	ldr	r3, [r4, #20]
 8000b20:	b2f6      	uxtb	r6, r6
 8000b22:	4283      	cmp	r3, r0
 8000b24:	4637      	mov	r7, r6
 8000b26:	dc04      	bgt.n	8000b32 <__swbuf_r+0x42>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 f926 	bl	8000d7c <_fflush_r>
 8000b30:	bb30      	cbnz	r0, 8000b80 <__swbuf_r+0x90>
 8000b32:	68a3      	ldr	r3, [r4, #8]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	60a3      	str	r3, [r4, #8]
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	6022      	str	r2, [r4, #0]
 8000b3e:	701e      	strb	r6, [r3, #0]
 8000b40:	6963      	ldr	r3, [r4, #20]
 8000b42:	3001      	adds	r0, #1
 8000b44:	4283      	cmp	r3, r0
 8000b46:	d004      	beq.n	8000b52 <__swbuf_r+0x62>
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	07db      	lsls	r3, r3, #31
 8000b4c:	d506      	bpl.n	8000b5c <__swbuf_r+0x6c>
 8000b4e:	2e0a      	cmp	r6, #10
 8000b50:	d104      	bne.n	8000b5c <__swbuf_r+0x6c>
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 f911 	bl	8000d7c <_fflush_r>
 8000b5a:	b988      	cbnz	r0, 8000b80 <__swbuf_r+0x90>
 8000b5c:	4638      	mov	r0, r7
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <__swbuf_r+0x9c>)
 8000b62:	429c      	cmp	r4, r3
 8000b64:	d101      	bne.n	8000b6a <__swbuf_r+0x7a>
 8000b66:	68ac      	ldr	r4, [r5, #8]
 8000b68:	e7cf      	b.n	8000b0a <__swbuf_r+0x1a>
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <__swbuf_r+0xa0>)
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	bf08      	it	eq
 8000b70:	68ec      	ldreq	r4, [r5, #12]
 8000b72:	e7ca      	b.n	8000b0a <__swbuf_r+0x1a>
 8000b74:	4621      	mov	r1, r4
 8000b76:	4628      	mov	r0, r5
 8000b78:	f000 f80c 	bl	8000b94 <__swsetup_r>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d0cb      	beq.n	8000b18 <__swbuf_r+0x28>
 8000b80:	f04f 37ff 	mov.w	r7, #4294967295
 8000b84:	e7ea      	b.n	8000b5c <__swbuf_r+0x6c>
 8000b86:	bf00      	nop
 8000b88:	080013e0 	.word	0x080013e0
 8000b8c:	08001400 	.word	0x08001400
 8000b90:	080013c0 	.word	0x080013c0

08000b94 <__swsetup_r>:
 8000b94:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <__swsetup_r+0xcc>)
 8000b96:	b570      	push	{r4, r5, r6, lr}
 8000b98:	681d      	ldr	r5, [r3, #0]
 8000b9a:	4606      	mov	r6, r0
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	b125      	cbz	r5, 8000baa <__swsetup_r+0x16>
 8000ba0:	69ab      	ldr	r3, [r5, #24]
 8000ba2:	b913      	cbnz	r3, 8000baa <__swsetup_r+0x16>
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f97d 	bl	8000ea4 <__sinit>
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <__swsetup_r+0xd0>)
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d10f      	bne.n	8000bd0 <__swsetup_r+0x3c>
 8000bb0:	686c      	ldr	r4, [r5, #4]
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bb8:	0719      	lsls	r1, r3, #28
 8000bba:	d42c      	bmi.n	8000c16 <__swsetup_r+0x82>
 8000bbc:	06dd      	lsls	r5, r3, #27
 8000bbe:	d411      	bmi.n	8000be4 <__swsetup_r+0x50>
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	6033      	str	r3, [r6, #0]
 8000bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bc8:	81a3      	strh	r3, [r4, #12]
 8000bca:	f04f 30ff 	mov.w	r0, #4294967295
 8000bce:	e03e      	b.n	8000c4e <__swsetup_r+0xba>
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <__swsetup_r+0xd4>)
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d101      	bne.n	8000bda <__swsetup_r+0x46>
 8000bd6:	68ac      	ldr	r4, [r5, #8]
 8000bd8:	e7eb      	b.n	8000bb2 <__swsetup_r+0x1e>
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <__swsetup_r+0xd8>)
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	bf08      	it	eq
 8000be0:	68ec      	ldreq	r4, [r5, #12]
 8000be2:	e7e6      	b.n	8000bb2 <__swsetup_r+0x1e>
 8000be4:	0758      	lsls	r0, r3, #29
 8000be6:	d512      	bpl.n	8000c0e <__swsetup_r+0x7a>
 8000be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bea:	b141      	cbz	r1, 8000bfe <__swsetup_r+0x6a>
 8000bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d002      	beq.n	8000bfa <__swsetup_r+0x66>
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f000 fa59 	bl	80010ac <_free_r>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8000bfe:	89a3      	ldrh	r3, [r4, #12]
 8000c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c04:	81a3      	strh	r3, [r4, #12]
 8000c06:	2300      	movs	r3, #0
 8000c08:	6063      	str	r3, [r4, #4]
 8000c0a:	6923      	ldr	r3, [r4, #16]
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	81a3      	strh	r3, [r4, #12]
 8000c16:	6923      	ldr	r3, [r4, #16]
 8000c18:	b94b      	cbnz	r3, 8000c2e <__swsetup_r+0x9a>
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c24:	d003      	beq.n	8000c2e <__swsetup_r+0x9a>
 8000c26:	4621      	mov	r1, r4
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f000 f9ff 	bl	800102c <__smakebuf_r>
 8000c2e:	89a0      	ldrh	r0, [r4, #12]
 8000c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c34:	f010 0301 	ands.w	r3, r0, #1
 8000c38:	d00a      	beq.n	8000c50 <__swsetup_r+0xbc>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60a3      	str	r3, [r4, #8]
 8000c3e:	6963      	ldr	r3, [r4, #20]
 8000c40:	425b      	negs	r3, r3
 8000c42:	61a3      	str	r3, [r4, #24]
 8000c44:	6923      	ldr	r3, [r4, #16]
 8000c46:	b943      	cbnz	r3, 8000c5a <__swsetup_r+0xc6>
 8000c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c4c:	d1ba      	bne.n	8000bc4 <__swsetup_r+0x30>
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	0781      	lsls	r1, r0, #30
 8000c52:	bf58      	it	pl
 8000c54:	6963      	ldrpl	r3, [r4, #20]
 8000c56:	60a3      	str	r3, [r4, #8]
 8000c58:	e7f4      	b.n	8000c44 <__swsetup_r+0xb0>
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	e7f7      	b.n	8000c4e <__swsetup_r+0xba>
 8000c5e:	bf00      	nop
 8000c60:	20000000 	.word	0x20000000
 8000c64:	080013e0 	.word	0x080013e0
 8000c68:	08001400 	.word	0x08001400
 8000c6c:	080013c0 	.word	0x080013c0

08000c70 <__sflush_r>:
 8000c70:	898a      	ldrh	r2, [r1, #12]
 8000c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c76:	4605      	mov	r5, r0
 8000c78:	0710      	lsls	r0, r2, #28
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	d458      	bmi.n	8000d30 <__sflush_r+0xc0>
 8000c7e:	684b      	ldr	r3, [r1, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dc05      	bgt.n	8000c90 <__sflush_r+0x20>
 8000c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dc02      	bgt.n	8000c90 <__sflush_r+0x20>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d0f9      	beq.n	8000c8a <__sflush_r+0x1a>
 8000c96:	2300      	movs	r3, #0
 8000c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c9c:	682f      	ldr	r7, [r5, #0]
 8000c9e:	602b      	str	r3, [r5, #0]
 8000ca0:	d032      	beq.n	8000d08 <__sflush_r+0x98>
 8000ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	075a      	lsls	r2, r3, #29
 8000ca8:	d505      	bpl.n	8000cb6 <__sflush_r+0x46>
 8000caa:	6863      	ldr	r3, [r4, #4]
 8000cac:	1ac0      	subs	r0, r0, r3
 8000cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cb0:	b10b      	cbz	r3, 8000cb6 <__sflush_r+0x46>
 8000cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cb4:	1ac0      	subs	r0, r0, r3
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	4602      	mov	r2, r0
 8000cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cbc:	6a21      	ldr	r1, [r4, #32]
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	47b0      	blx	r6
 8000cc2:	1c43      	adds	r3, r0, #1
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	d106      	bne.n	8000cd6 <__sflush_r+0x66>
 8000cc8:	6829      	ldr	r1, [r5, #0]
 8000cca:	291d      	cmp	r1, #29
 8000ccc:	d82c      	bhi.n	8000d28 <__sflush_r+0xb8>
 8000cce:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <__sflush_r+0x108>)
 8000cd0:	40ca      	lsrs	r2, r1
 8000cd2:	07d6      	lsls	r6, r2, #31
 8000cd4:	d528      	bpl.n	8000d28 <__sflush_r+0xb8>
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	6062      	str	r2, [r4, #4]
 8000cda:	04d9      	lsls	r1, r3, #19
 8000cdc:	6922      	ldr	r2, [r4, #16]
 8000cde:	6022      	str	r2, [r4, #0]
 8000ce0:	d504      	bpl.n	8000cec <__sflush_r+0x7c>
 8000ce2:	1c42      	adds	r2, r0, #1
 8000ce4:	d101      	bne.n	8000cea <__sflush_r+0x7a>
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	b903      	cbnz	r3, 8000cec <__sflush_r+0x7c>
 8000cea:	6560      	str	r0, [r4, #84]	; 0x54
 8000cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cee:	602f      	str	r7, [r5, #0]
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d0ca      	beq.n	8000c8a <__sflush_r+0x1a>
 8000cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d002      	beq.n	8000d02 <__sflush_r+0x92>
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f000 f9d5 	bl	80010ac <_free_r>
 8000d02:	2000      	movs	r0, #0
 8000d04:	6360      	str	r0, [r4, #52]	; 0x34
 8000d06:	e7c1      	b.n	8000c8c <__sflush_r+0x1c>
 8000d08:	6a21      	ldr	r1, [r4, #32]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	47b0      	blx	r6
 8000d10:	1c41      	adds	r1, r0, #1
 8000d12:	d1c7      	bne.n	8000ca4 <__sflush_r+0x34>
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0c4      	beq.n	8000ca4 <__sflush_r+0x34>
 8000d1a:	2b1d      	cmp	r3, #29
 8000d1c:	d001      	beq.n	8000d22 <__sflush_r+0xb2>
 8000d1e:	2b16      	cmp	r3, #22
 8000d20:	d101      	bne.n	8000d26 <__sflush_r+0xb6>
 8000d22:	602f      	str	r7, [r5, #0]
 8000d24:	e7b1      	b.n	8000c8a <__sflush_r+0x1a>
 8000d26:	89a3      	ldrh	r3, [r4, #12]
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	81a3      	strh	r3, [r4, #12]
 8000d2e:	e7ad      	b.n	8000c8c <__sflush_r+0x1c>
 8000d30:	690f      	ldr	r7, [r1, #16]
 8000d32:	2f00      	cmp	r7, #0
 8000d34:	d0a9      	beq.n	8000c8a <__sflush_r+0x1a>
 8000d36:	0793      	lsls	r3, r2, #30
 8000d38:	680e      	ldr	r6, [r1, #0]
 8000d3a:	bf08      	it	eq
 8000d3c:	694b      	ldreq	r3, [r1, #20]
 8000d3e:	600f      	str	r7, [r1, #0]
 8000d40:	bf18      	it	ne
 8000d42:	2300      	movne	r3, #0
 8000d44:	eba6 0807 	sub.w	r8, r6, r7
 8000d48:	608b      	str	r3, [r1, #8]
 8000d4a:	f1b8 0f00 	cmp.w	r8, #0
 8000d4e:	dd9c      	ble.n	8000c8a <__sflush_r+0x1a>
 8000d50:	6a21      	ldr	r1, [r4, #32]
 8000d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d54:	4643      	mov	r3, r8
 8000d56:	463a      	mov	r2, r7
 8000d58:	4628      	mov	r0, r5
 8000d5a:	47b0      	blx	r6
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	dc06      	bgt.n	8000d6e <__sflush_r+0xfe>
 8000d60:	89a3      	ldrh	r3, [r4, #12]
 8000d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d66:	81a3      	strh	r3, [r4, #12]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	e78e      	b.n	8000c8c <__sflush_r+0x1c>
 8000d6e:	4407      	add	r7, r0
 8000d70:	eba8 0800 	sub.w	r8, r8, r0
 8000d74:	e7e9      	b.n	8000d4a <__sflush_r+0xda>
 8000d76:	bf00      	nop
 8000d78:	20400001 	.word	0x20400001

08000d7c <_fflush_r>:
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	690b      	ldr	r3, [r1, #16]
 8000d80:	4605      	mov	r5, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	b913      	cbnz	r3, 8000d8c <_fflush_r+0x10>
 8000d86:	2500      	movs	r5, #0
 8000d88:	4628      	mov	r0, r5
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	b118      	cbz	r0, 8000d96 <_fflush_r+0x1a>
 8000d8e:	6983      	ldr	r3, [r0, #24]
 8000d90:	b90b      	cbnz	r3, 8000d96 <_fflush_r+0x1a>
 8000d92:	f000 f887 	bl	8000ea4 <__sinit>
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <_fflush_r+0x6c>)
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d11b      	bne.n	8000dd4 <_fflush_r+0x58>
 8000d9c:	686c      	ldr	r4, [r5, #4]
 8000d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0ef      	beq.n	8000d86 <_fflush_r+0xa>
 8000da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000da8:	07d0      	lsls	r0, r2, #31
 8000daa:	d404      	bmi.n	8000db6 <_fflush_r+0x3a>
 8000dac:	0599      	lsls	r1, r3, #22
 8000dae:	d402      	bmi.n	8000db6 <_fflush_r+0x3a>
 8000db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000db2:	f000 f915 	bl	8000fe0 <__retarget_lock_acquire_recursive>
 8000db6:	4628      	mov	r0, r5
 8000db8:	4621      	mov	r1, r4
 8000dba:	f7ff ff59 	bl	8000c70 <__sflush_r>
 8000dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dc0:	07da      	lsls	r2, r3, #31
 8000dc2:	4605      	mov	r5, r0
 8000dc4:	d4e0      	bmi.n	8000d88 <_fflush_r+0xc>
 8000dc6:	89a3      	ldrh	r3, [r4, #12]
 8000dc8:	059b      	lsls	r3, r3, #22
 8000dca:	d4dd      	bmi.n	8000d88 <_fflush_r+0xc>
 8000dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dce:	f000 f908 	bl	8000fe2 <__retarget_lock_release_recursive>
 8000dd2:	e7d9      	b.n	8000d88 <_fflush_r+0xc>
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <_fflush_r+0x70>)
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	d101      	bne.n	8000dde <_fflush_r+0x62>
 8000dda:	68ac      	ldr	r4, [r5, #8]
 8000ddc:	e7df      	b.n	8000d9e <_fflush_r+0x22>
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <_fflush_r+0x74>)
 8000de0:	429c      	cmp	r4, r3
 8000de2:	bf08      	it	eq
 8000de4:	68ec      	ldreq	r4, [r5, #12]
 8000de6:	e7da      	b.n	8000d9e <_fflush_r+0x22>
 8000de8:	080013e0 	.word	0x080013e0
 8000dec:	08001400 	.word	0x08001400
 8000df0:	080013c0 	.word	0x080013c0

08000df4 <std>:
 8000df4:	2300      	movs	r3, #0
 8000df6:	b510      	push	{r4, lr}
 8000df8:	4604      	mov	r4, r0
 8000dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8000dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e02:	6083      	str	r3, [r0, #8]
 8000e04:	8181      	strh	r1, [r0, #12]
 8000e06:	6643      	str	r3, [r0, #100]	; 0x64
 8000e08:	81c2      	strh	r2, [r0, #14]
 8000e0a:	6183      	str	r3, [r0, #24]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2208      	movs	r2, #8
 8000e10:	305c      	adds	r0, #92	; 0x5c
 8000e12:	f7ff fdef 	bl	80009f4 <memset>
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <std+0x38>)
 8000e18:	6263      	str	r3, [r4, #36]	; 0x24
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <std+0x3c>)
 8000e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <std+0x40>)
 8000e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <std+0x44>)
 8000e24:	6224      	str	r4, [r4, #32]
 8000e26:	6323      	str	r3, [r4, #48]	; 0x30
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	bf00      	nop
 8000e2c:	0800121d 	.word	0x0800121d
 8000e30:	0800123f 	.word	0x0800123f
 8000e34:	08001277 	.word	0x08001277
 8000e38:	0800129b 	.word	0x0800129b

08000e3c <_cleanup_r>:
 8000e3c:	4901      	ldr	r1, [pc, #4]	; (8000e44 <_cleanup_r+0x8>)
 8000e3e:	f000 b8af 	b.w	8000fa0 <_fwalk_reent>
 8000e42:	bf00      	nop
 8000e44:	08000d7d 	.word	0x08000d7d

08000e48 <__sfmoreglue>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	1e4a      	subs	r2, r1, #1
 8000e4c:	2568      	movs	r5, #104	; 0x68
 8000e4e:	4355      	muls	r5, r2
 8000e50:	460e      	mov	r6, r1
 8000e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e56:	f000 f977 	bl	8001148 <_malloc_r>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	b140      	cbz	r0, 8000e70 <__sfmoreglue+0x28>
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e9c0 1600 	strd	r1, r6, [r0]
 8000e64:	300c      	adds	r0, #12
 8000e66:	60a0      	str	r0, [r4, #8]
 8000e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e6c:	f7ff fdc2 	bl	80009f4 <memset>
 8000e70:	4620      	mov	r0, r4
 8000e72:	bd70      	pop	{r4, r5, r6, pc}

08000e74 <__sfp_lock_acquire>:
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__sfp_lock_acquire+0x8>)
 8000e76:	f000 b8b3 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	20000094 	.word	0x20000094

08000e80 <__sfp_lock_release>:
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <__sfp_lock_release+0x8>)
 8000e82:	f000 b8ae 	b.w	8000fe2 <__retarget_lock_release_recursive>
 8000e86:	bf00      	nop
 8000e88:	20000094 	.word	0x20000094

08000e8c <__sinit_lock_acquire>:
 8000e8c:	4801      	ldr	r0, [pc, #4]	; (8000e94 <__sinit_lock_acquire+0x8>)
 8000e8e:	f000 b8a7 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 8000e92:	bf00      	nop
 8000e94:	2000008f 	.word	0x2000008f

08000e98 <__sinit_lock_release>:
 8000e98:	4801      	ldr	r0, [pc, #4]	; (8000ea0 <__sinit_lock_release+0x8>)
 8000e9a:	f000 b8a2 	b.w	8000fe2 <__retarget_lock_release_recursive>
 8000e9e:	bf00      	nop
 8000ea0:	2000008f 	.word	0x2000008f

08000ea4 <__sinit>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	f7ff fff0 	bl	8000e8c <__sinit_lock_acquire>
 8000eac:	69a3      	ldr	r3, [r4, #24]
 8000eae:	b11b      	cbz	r3, 8000eb8 <__sinit+0x14>
 8000eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eb4:	f7ff bff0 	b.w	8000e98 <__sinit_lock_release>
 8000eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <__sinit+0x68>)
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <__sinit+0x6c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	bf04      	itt	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	61a3      	streq	r3, [r4, #24]
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f000 f820 	bl	8000f14 <__sfp>
 8000ed4:	6060      	str	r0, [r4, #4]
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f000 f81c 	bl	8000f14 <__sfp>
 8000edc:	60a0      	str	r0, [r4, #8]
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 f818 	bl	8000f14 <__sfp>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60e0      	str	r0, [r4, #12]
 8000ee8:	2104      	movs	r1, #4
 8000eea:	6860      	ldr	r0, [r4, #4]
 8000eec:	f7ff ff82 	bl	8000df4 <std>
 8000ef0:	68a0      	ldr	r0, [r4, #8]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2109      	movs	r1, #9
 8000ef6:	f7ff ff7d 	bl	8000df4 <std>
 8000efa:	68e0      	ldr	r0, [r4, #12]
 8000efc:	2202      	movs	r2, #2
 8000efe:	2112      	movs	r1, #18
 8000f00:	f7ff ff78 	bl	8000df4 <std>
 8000f04:	2301      	movs	r3, #1
 8000f06:	61a3      	str	r3, [r4, #24]
 8000f08:	e7d2      	b.n	8000eb0 <__sinit+0xc>
 8000f0a:	bf00      	nop
 8000f0c:	080013bc 	.word	0x080013bc
 8000f10:	08000e3d 	.word	0x08000e3d

08000f14 <__sfp>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	4607      	mov	r7, r0
 8000f18:	f7ff ffac 	bl	8000e74 <__sfp_lock_acquire>
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <__sfp+0x84>)
 8000f1e:	681e      	ldr	r6, [r3, #0]
 8000f20:	69b3      	ldr	r3, [r6, #24]
 8000f22:	b913      	cbnz	r3, 8000f2a <__sfp+0x16>
 8000f24:	4630      	mov	r0, r6
 8000f26:	f7ff ffbd 	bl	8000ea4 <__sinit>
 8000f2a:	3648      	adds	r6, #72	; 0x48
 8000f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	d503      	bpl.n	8000f3c <__sfp+0x28>
 8000f34:	6833      	ldr	r3, [r6, #0]
 8000f36:	b30b      	cbz	r3, 8000f7c <__sfp+0x68>
 8000f38:	6836      	ldr	r6, [r6, #0]
 8000f3a:	e7f7      	b.n	8000f2c <__sfp+0x18>
 8000f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f40:	b9d5      	cbnz	r5, 8000f78 <__sfp+0x64>
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <__sfp+0x88>)
 8000f44:	60e3      	str	r3, [r4, #12]
 8000f46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8000f4c:	f000 f847 	bl	8000fde <__retarget_lock_init_recursive>
 8000f50:	f7ff ff96 	bl	8000e80 <__sfp_lock_release>
 8000f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f5c:	6025      	str	r5, [r4, #0]
 8000f5e:	61a5      	str	r5, [r4, #24]
 8000f60:	2208      	movs	r2, #8
 8000f62:	4629      	mov	r1, r5
 8000f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f68:	f7ff fd44 	bl	80009f4 <memset>
 8000f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f74:	4620      	mov	r0, r4
 8000f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f78:	3468      	adds	r4, #104	; 0x68
 8000f7a:	e7d9      	b.n	8000f30 <__sfp+0x1c>
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f7ff ff62 	bl	8000e48 <__sfmoreglue>
 8000f84:	4604      	mov	r4, r0
 8000f86:	6030      	str	r0, [r6, #0]
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d1d5      	bne.n	8000f38 <__sfp+0x24>
 8000f8c:	f7ff ff78 	bl	8000e80 <__sfp_lock_release>
 8000f90:	230c      	movs	r3, #12
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	e7ee      	b.n	8000f74 <__sfp+0x60>
 8000f96:	bf00      	nop
 8000f98:	080013bc 	.word	0x080013bc
 8000f9c:	ffff0001 	.word	0xffff0001

08000fa0 <_fwalk_reent>:
 8000fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4688      	mov	r8, r1
 8000fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fac:	2700      	movs	r7, #0
 8000fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8000fb6:	d505      	bpl.n	8000fc4 <_fwalk_reent+0x24>
 8000fb8:	6824      	ldr	r4, [r4, #0]
 8000fba:	2c00      	cmp	r4, #0
 8000fbc:	d1f7      	bne.n	8000fae <_fwalk_reent+0xe>
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc4:	89ab      	ldrh	r3, [r5, #12]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d907      	bls.n	8000fda <_fwalk_reent+0x3a>
 8000fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	d003      	beq.n	8000fda <_fwalk_reent+0x3a>
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	47c0      	blx	r8
 8000fd8:	4307      	orrs	r7, r0
 8000fda:	3568      	adds	r5, #104	; 0x68
 8000fdc:	e7e9      	b.n	8000fb2 <_fwalk_reent+0x12>

08000fde <__retarget_lock_init_recursive>:
 8000fde:	4770      	bx	lr

08000fe0 <__retarget_lock_acquire_recursive>:
 8000fe0:	4770      	bx	lr

08000fe2 <__retarget_lock_release_recursive>:
 8000fe2:	4770      	bx	lr

08000fe4 <__swhatbuf_r>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	460e      	mov	r6, r1
 8000fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fec:	2900      	cmp	r1, #0
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	461d      	mov	r5, r3
 8000ff4:	da07      	bge.n	8001006 <__swhatbuf_r+0x22>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	602b      	str	r3, [r5, #0]
 8000ffa:	89b3      	ldrh	r3, [r6, #12]
 8000ffc:	061a      	lsls	r2, r3, #24
 8000ffe:	d410      	bmi.n	8001022 <__swhatbuf_r+0x3e>
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	e00e      	b.n	8001024 <__swhatbuf_r+0x40>
 8001006:	466a      	mov	r2, sp
 8001008:	f000 f96e 	bl	80012e8 <_fstat_r>
 800100c:	2800      	cmp	r0, #0
 800100e:	dbf2      	blt.n	8000ff6 <__swhatbuf_r+0x12>
 8001010:	9a01      	ldr	r2, [sp, #4]
 8001012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800101a:	425a      	negs	r2, r3
 800101c:	415a      	adcs	r2, r3
 800101e:	602a      	str	r2, [r5, #0]
 8001020:	e7ee      	b.n	8001000 <__swhatbuf_r+0x1c>
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	2000      	movs	r0, #0
 8001026:	6023      	str	r3, [r4, #0]
 8001028:	b016      	add	sp, #88	; 0x58
 800102a:	bd70      	pop	{r4, r5, r6, pc}

0800102c <__smakebuf_r>:
 800102c:	898b      	ldrh	r3, [r1, #12]
 800102e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001030:	079d      	lsls	r5, r3, #30
 8001032:	4606      	mov	r6, r0
 8001034:	460c      	mov	r4, r1
 8001036:	d507      	bpl.n	8001048 <__smakebuf_r+0x1c>
 8001038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	6123      	str	r3, [r4, #16]
 8001040:	2301      	movs	r3, #1
 8001042:	6163      	str	r3, [r4, #20]
 8001044:	b002      	add	sp, #8
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	ab01      	add	r3, sp, #4
 800104a:	466a      	mov	r2, sp
 800104c:	f7ff ffca 	bl	8000fe4 <__swhatbuf_r>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	4605      	mov	r5, r0
 8001054:	4630      	mov	r0, r6
 8001056:	f000 f877 	bl	8001148 <_malloc_r>
 800105a:	b948      	cbnz	r0, 8001070 <__smakebuf_r+0x44>
 800105c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001060:	059a      	lsls	r2, r3, #22
 8001062:	d4ef      	bmi.n	8001044 <__smakebuf_r+0x18>
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	81a3      	strh	r3, [r4, #12]
 800106e:	e7e3      	b.n	8001038 <__smakebuf_r+0xc>
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <__smakebuf_r+0x7c>)
 8001072:	62b3      	str	r3, [r6, #40]	; 0x28
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	6020      	str	r0, [r4, #0]
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	6163      	str	r3, [r4, #20]
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	6120      	str	r0, [r4, #16]
 8001086:	b15b      	cbz	r3, 80010a0 <__smakebuf_r+0x74>
 8001088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800108c:	4630      	mov	r0, r6
 800108e:	f000 f93d 	bl	800130c <_isatty_r>
 8001092:	b128      	cbz	r0, 80010a0 <__smakebuf_r+0x74>
 8001094:	89a3      	ldrh	r3, [r4, #12]
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	81a3      	strh	r3, [r4, #12]
 80010a0:	89a0      	ldrh	r0, [r4, #12]
 80010a2:	4305      	orrs	r5, r0
 80010a4:	81a5      	strh	r5, [r4, #12]
 80010a6:	e7cd      	b.n	8001044 <__smakebuf_r+0x18>
 80010a8:	08000e3d 	.word	0x08000e3d

080010ac <_free_r>:
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4605      	mov	r5, r0
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d045      	beq.n	8001140 <_free_r+0x94>
 80010b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b8:	1f0c      	subs	r4, r1, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfb8      	it	lt
 80010be:	18e4      	addlt	r4, r4, r3
 80010c0:	f000 f946 	bl	8001350 <__malloc_lock>
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <_free_r+0x98>)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	4610      	mov	r0, r2
 80010ca:	b933      	cbnz	r3, 80010da <_free_r+0x2e>
 80010cc:	6063      	str	r3, [r4, #4]
 80010ce:	6014      	str	r4, [r2, #0]
 80010d0:	4628      	mov	r0, r5
 80010d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d6:	f000 b941 	b.w	800135c <__malloc_unlock>
 80010da:	42a3      	cmp	r3, r4
 80010dc:	d90b      	bls.n	80010f6 <_free_r+0x4a>
 80010de:	6821      	ldr	r1, [r4, #0]
 80010e0:	1862      	adds	r2, r4, r1
 80010e2:	4293      	cmp	r3, r2
 80010e4:	bf04      	itt	eq
 80010e6:	681a      	ldreq	r2, [r3, #0]
 80010e8:	685b      	ldreq	r3, [r3, #4]
 80010ea:	6063      	str	r3, [r4, #4]
 80010ec:	bf04      	itt	eq
 80010ee:	1852      	addeq	r2, r2, r1
 80010f0:	6022      	streq	r2, [r4, #0]
 80010f2:	6004      	str	r4, [r0, #0]
 80010f4:	e7ec      	b.n	80010d0 <_free_r+0x24>
 80010f6:	461a      	mov	r2, r3
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	b10b      	cbz	r3, 8001100 <_free_r+0x54>
 80010fc:	42a3      	cmp	r3, r4
 80010fe:	d9fa      	bls.n	80010f6 <_free_r+0x4a>
 8001100:	6811      	ldr	r1, [r2, #0]
 8001102:	1850      	adds	r0, r2, r1
 8001104:	42a0      	cmp	r0, r4
 8001106:	d10b      	bne.n	8001120 <_free_r+0x74>
 8001108:	6820      	ldr	r0, [r4, #0]
 800110a:	4401      	add	r1, r0
 800110c:	1850      	adds	r0, r2, r1
 800110e:	4283      	cmp	r3, r0
 8001110:	6011      	str	r1, [r2, #0]
 8001112:	d1dd      	bne.n	80010d0 <_free_r+0x24>
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	6053      	str	r3, [r2, #4]
 800111a:	4401      	add	r1, r0
 800111c:	6011      	str	r1, [r2, #0]
 800111e:	e7d7      	b.n	80010d0 <_free_r+0x24>
 8001120:	d902      	bls.n	8001128 <_free_r+0x7c>
 8001122:	230c      	movs	r3, #12
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	e7d3      	b.n	80010d0 <_free_r+0x24>
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	1821      	adds	r1, r4, r0
 800112c:	428b      	cmp	r3, r1
 800112e:	bf04      	itt	eq
 8001130:	6819      	ldreq	r1, [r3, #0]
 8001132:	685b      	ldreq	r3, [r3, #4]
 8001134:	6063      	str	r3, [r4, #4]
 8001136:	bf04      	itt	eq
 8001138:	1809      	addeq	r1, r1, r0
 800113a:	6021      	streq	r1, [r4, #0]
 800113c:	6054      	str	r4, [r2, #4]
 800113e:	e7c7      	b.n	80010d0 <_free_r+0x24>
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop
 8001144:	20000084 	.word	0x20000084

08001148 <_malloc_r>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	1ccd      	adds	r5, r1, #3
 800114c:	f025 0503 	bic.w	r5, r5, #3
 8001150:	3508      	adds	r5, #8
 8001152:	2d0c      	cmp	r5, #12
 8001154:	bf38      	it	cc
 8001156:	250c      	movcc	r5, #12
 8001158:	2d00      	cmp	r5, #0
 800115a:	4606      	mov	r6, r0
 800115c:	db01      	blt.n	8001162 <_malloc_r+0x1a>
 800115e:	42a9      	cmp	r1, r5
 8001160:	d903      	bls.n	800116a <_malloc_r+0x22>
 8001162:	230c      	movs	r3, #12
 8001164:	6033      	str	r3, [r6, #0]
 8001166:	2000      	movs	r0, #0
 8001168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116a:	f000 f8f1 	bl	8001350 <__malloc_lock>
 800116e:	4921      	ldr	r1, [pc, #132]	; (80011f4 <_malloc_r+0xac>)
 8001170:	680a      	ldr	r2, [r1, #0]
 8001172:	4614      	mov	r4, r2
 8001174:	b99c      	cbnz	r4, 800119e <_malloc_r+0x56>
 8001176:	4f20      	ldr	r7, [pc, #128]	; (80011f8 <_malloc_r+0xb0>)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b923      	cbnz	r3, 8001186 <_malloc_r+0x3e>
 800117c:	4621      	mov	r1, r4
 800117e:	4630      	mov	r0, r6
 8001180:	f000 f83c 	bl	80011fc <_sbrk_r>
 8001184:	6038      	str	r0, [r7, #0]
 8001186:	4629      	mov	r1, r5
 8001188:	4630      	mov	r0, r6
 800118a:	f000 f837 	bl	80011fc <_sbrk_r>
 800118e:	1c43      	adds	r3, r0, #1
 8001190:	d123      	bne.n	80011da <_malloc_r+0x92>
 8001192:	230c      	movs	r3, #12
 8001194:	6033      	str	r3, [r6, #0]
 8001196:	4630      	mov	r0, r6
 8001198:	f000 f8e0 	bl	800135c <__malloc_unlock>
 800119c:	e7e3      	b.n	8001166 <_malloc_r+0x1e>
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	1b5b      	subs	r3, r3, r5
 80011a2:	d417      	bmi.n	80011d4 <_malloc_r+0x8c>
 80011a4:	2b0b      	cmp	r3, #11
 80011a6:	d903      	bls.n	80011b0 <_malloc_r+0x68>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	441c      	add	r4, r3
 80011ac:	6025      	str	r5, [r4, #0]
 80011ae:	e004      	b.n	80011ba <_malloc_r+0x72>
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	bf0c      	ite	eq
 80011b6:	600b      	streq	r3, [r1, #0]
 80011b8:	6053      	strne	r3, [r2, #4]
 80011ba:	4630      	mov	r0, r6
 80011bc:	f000 f8ce 	bl	800135c <__malloc_unlock>
 80011c0:	f104 000b 	add.w	r0, r4, #11
 80011c4:	1d23      	adds	r3, r4, #4
 80011c6:	f020 0007 	bic.w	r0, r0, #7
 80011ca:	1ac2      	subs	r2, r0, r3
 80011cc:	d0cc      	beq.n	8001168 <_malloc_r+0x20>
 80011ce:	1a1b      	subs	r3, r3, r0
 80011d0:	50a3      	str	r3, [r4, r2]
 80011d2:	e7c9      	b.n	8001168 <_malloc_r+0x20>
 80011d4:	4622      	mov	r2, r4
 80011d6:	6864      	ldr	r4, [r4, #4]
 80011d8:	e7cc      	b.n	8001174 <_malloc_r+0x2c>
 80011da:	1cc4      	adds	r4, r0, #3
 80011dc:	f024 0403 	bic.w	r4, r4, #3
 80011e0:	42a0      	cmp	r0, r4
 80011e2:	d0e3      	beq.n	80011ac <_malloc_r+0x64>
 80011e4:	1a21      	subs	r1, r4, r0
 80011e6:	4630      	mov	r0, r6
 80011e8:	f000 f808 	bl	80011fc <_sbrk_r>
 80011ec:	3001      	adds	r0, #1
 80011ee:	d1dd      	bne.n	80011ac <_malloc_r+0x64>
 80011f0:	e7cf      	b.n	8001192 <_malloc_r+0x4a>
 80011f2:	bf00      	nop
 80011f4:	20000084 	.word	0x20000084
 80011f8:	20000088 	.word	0x20000088

080011fc <_sbrk_r>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4d06      	ldr	r5, [pc, #24]	; (8001218 <_sbrk_r+0x1c>)
 8001200:	2300      	movs	r3, #0
 8001202:	4604      	mov	r4, r0
 8001204:	4608      	mov	r0, r1
 8001206:	602b      	str	r3, [r5, #0]
 8001208:	f7ff fb6a 	bl	80008e0 <_sbrk>
 800120c:	1c43      	adds	r3, r0, #1
 800120e:	d102      	bne.n	8001216 <_sbrk_r+0x1a>
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	b103      	cbz	r3, 8001216 <_sbrk_r+0x1a>
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	bd38      	pop	{r3, r4, r5, pc}
 8001218:	20000098 	.word	0x20000098

0800121c <__sread>:
 800121c:	b510      	push	{r4, lr}
 800121e:	460c      	mov	r4, r1
 8001220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001224:	f000 f8a0 	bl	8001368 <_read_r>
 8001228:	2800      	cmp	r0, #0
 800122a:	bfab      	itete	ge
 800122c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800122e:	89a3      	ldrhlt	r3, [r4, #12]
 8001230:	181b      	addge	r3, r3, r0
 8001232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001236:	bfac      	ite	ge
 8001238:	6563      	strge	r3, [r4, #84]	; 0x54
 800123a:	81a3      	strhlt	r3, [r4, #12]
 800123c:	bd10      	pop	{r4, pc}

0800123e <__swrite>:
 800123e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001242:	461f      	mov	r7, r3
 8001244:	898b      	ldrh	r3, [r1, #12]
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	4605      	mov	r5, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4616      	mov	r6, r2
 800124e:	d505      	bpl.n	800125c <__swrite+0x1e>
 8001250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001254:	2302      	movs	r3, #2
 8001256:	2200      	movs	r2, #0
 8001258:	f000 f868 	bl	800132c <_lseek_r>
 800125c:	89a3      	ldrh	r3, [r4, #12]
 800125e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001266:	81a3      	strh	r3, [r4, #12]
 8001268:	4632      	mov	r2, r6
 800126a:	463b      	mov	r3, r7
 800126c:	4628      	mov	r0, r5
 800126e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001272:	f000 b817 	b.w	80012a4 <_write_r>

08001276 <__sseek>:
 8001276:	b510      	push	{r4, lr}
 8001278:	460c      	mov	r4, r1
 800127a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127e:	f000 f855 	bl	800132c <_lseek_r>
 8001282:	1c43      	adds	r3, r0, #1
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	bf15      	itete	ne
 8001288:	6560      	strne	r0, [r4, #84]	; 0x54
 800128a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800128e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001292:	81a3      	strheq	r3, [r4, #12]
 8001294:	bf18      	it	ne
 8001296:	81a3      	strhne	r3, [r4, #12]
 8001298:	bd10      	pop	{r4, pc}

0800129a <__sclose>:
 800129a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129e:	f000 b813 	b.w	80012c8 <_close_r>
	...

080012a4 <_write_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	4d07      	ldr	r5, [pc, #28]	; (80012c4 <_write_r+0x20>)
 80012a8:	4604      	mov	r4, r0
 80012aa:	4608      	mov	r0, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	2200      	movs	r2, #0
 80012b0:	602a      	str	r2, [r5, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f7ff fac7 	bl	8000846 <_write>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_write_r+0x1e>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_write_r+0x1e>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	20000098 	.word	0x20000098

080012c8 <_close_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d06      	ldr	r5, [pc, #24]	; (80012e4 <_close_r+0x1c>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602b      	str	r3, [r5, #0]
 80012d4:	f7ff fad3 	bl	800087e <_close>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_close_r+0x1a>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_close_r+0x1a>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	20000098 	.word	0x20000098

080012e8 <_fstat_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d07      	ldr	r5, [pc, #28]	; (8001308 <_fstat_r+0x20>)
 80012ec:	2300      	movs	r3, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	f7ff facd 	bl	8000894 <_fstat>
 80012fa:	1c43      	adds	r3, r0, #1
 80012fc:	d102      	bne.n	8001304 <_fstat_r+0x1c>
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	b103      	cbz	r3, 8001304 <_fstat_r+0x1c>
 8001302:	6023      	str	r3, [r4, #0]
 8001304:	bd38      	pop	{r3, r4, r5, pc}
 8001306:	bf00      	nop
 8001308:	20000098 	.word	0x20000098

0800130c <_isatty_r>:
 800130c:	b538      	push	{r3, r4, r5, lr}
 800130e:	4d06      	ldr	r5, [pc, #24]	; (8001328 <_isatty_r+0x1c>)
 8001310:	2300      	movs	r3, #0
 8001312:	4604      	mov	r4, r0
 8001314:	4608      	mov	r0, r1
 8001316:	602b      	str	r3, [r5, #0]
 8001318:	f7ff facb 	bl	80008b2 <_isatty>
 800131c:	1c43      	adds	r3, r0, #1
 800131e:	d102      	bne.n	8001326 <_isatty_r+0x1a>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	b103      	cbz	r3, 8001326 <_isatty_r+0x1a>
 8001324:	6023      	str	r3, [r4, #0]
 8001326:	bd38      	pop	{r3, r4, r5, pc}
 8001328:	20000098 	.word	0x20000098

0800132c <_lseek_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4d07      	ldr	r5, [pc, #28]	; (800134c <_lseek_r+0x20>)
 8001330:	4604      	mov	r4, r0
 8001332:	4608      	mov	r0, r1
 8001334:	4611      	mov	r1, r2
 8001336:	2200      	movs	r2, #0
 8001338:	602a      	str	r2, [r5, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	f7ff fac3 	bl	80008c6 <_lseek>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_lseek_r+0x1e>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	b103      	cbz	r3, 800134a <_lseek_r+0x1e>
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	20000098 	.word	0x20000098

08001350 <__malloc_lock>:
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <__malloc_lock+0x8>)
 8001352:	f7ff be45 	b.w	8000fe0 <__retarget_lock_acquire_recursive>
 8001356:	bf00      	nop
 8001358:	20000090 	.word	0x20000090

0800135c <__malloc_unlock>:
 800135c:	4801      	ldr	r0, [pc, #4]	; (8001364 <__malloc_unlock+0x8>)
 800135e:	f7ff be40 	b.w	8000fe2 <__retarget_lock_release_recursive>
 8001362:	bf00      	nop
 8001364:	20000090 	.word	0x20000090

08001368 <_read_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d07      	ldr	r5, [pc, #28]	; (8001388 <_read_r+0x20>)
 800136c:	4604      	mov	r4, r0
 800136e:	4608      	mov	r0, r1
 8001370:	4611      	mov	r1, r2
 8001372:	2200      	movs	r2, #0
 8001374:	602a      	str	r2, [r5, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	f7ff fa48 	bl	800080c <_read>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d102      	bne.n	8001386 <_read_r+0x1e>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	b103      	cbz	r3, 8001386 <_read_r+0x1e>
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	bd38      	pop	{r3, r4, r5, pc}
 8001388:	20000098 	.word	0x20000098

0800138c <_init>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr

08001398 <_fini>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr

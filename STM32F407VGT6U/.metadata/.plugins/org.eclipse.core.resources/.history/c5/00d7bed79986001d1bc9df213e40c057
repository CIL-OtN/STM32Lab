/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Waldemar Schneider
 * @brief          : Vier LED's
 ******************************************************************************
 * @attention
 *
 * Dieses Programm schaltet alle vier LED's auf dem Discovery Board ein!
 *
 ******************************************************************************
 */

#include <stdio.h>
#include <stdint.h>

#define GPIOD_MODER ((volatile uint32_t*) 0x40020C00)
#define GPIOD_AFRL ((volatile uint32_t*) 0x40020C20)
#define GPIOD_OTYPER ((volatile uint32_t*) 0x40020C14)
#define GPIOD_OSPEEDR ((volatile uint32_t*) 0x40020C18)
#define GPIOD_PUPDR ((volatile uint32_t*) 0x40020C1C)
#define TIM4_CR1 ((volatile uint32_t*) 0x40000800)
#define TIM4_DIER ((volatile uint32_t*) 0x4000080C)
#define TIM4_ARR ((volatile uint32_t*) 0x40000824)
#define TIM4_CCR1 ((volatile uint32_t*) 0x40000834)
#define TIM4_CCMR1 ((volatile uint32_t*) 0x40000820)
#define RCC_AHB1ENR (*(volatile uint32_t*) 0x40023830)
#define RCC_APB1ENR (*(volatile uint32_t*) 0x40023840)
#define RCC_AHB1ENR_GPIODEN (1 << 3)
#define RCC_APB1ENR_TIM4EN (1 << 2)
#define TIM_CR1_CEN (1 << 0)
#define TIM_CR1_DIR (1 << 4)
#define TIM_CR1_CKD (3 << 8)
#define TIM_CCMR1_OC1M_1 (1 << 4)
#define TIM_CCMR1_OC1M_2 (1 << 5)

void init(void)
{
   RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;
   RCC_APB1ENR |= RCC_APB1ENR_TIM4EN;

   *GPIOD_MODER = (*GPIOD_MODER & ~(0x3 << (12 * 2))) | (0x2 << (12 * 2));
   *GPIOD_AFRL = (*GPIOD_AFRL & ~(0xF << (12 * 4))) | (0x2 << (12 * 4));
   *GPIOD_OTYPER &= ~(1 << 12);
   *GPIOD_OSPEEDR = (*GPIOD_OSPEEDR & ~(0x3 << (12 * 2))) | (0x3 << (12 * 2));
   *GPIOD_PUPDR = (*GPIOD_PUPDR & ~(0x3 << (12 * 2))) | (0x1 << (12 * 2));

   *TIM4_CR1 &= ~TIM_CR1_CEN;
   *TIM4_CR1 &= ~TIM_CR1_DIR;
   *TIM4_CR1 &= ~TIM_CR1_CKD;
   TIM4->PSC = 8399;
   *TIM4_ARR = 999;
   *TIM4_CCR1 = 499;
   *TIM4_CCMR1 = (*TIM4_CCMR1 & ~TIM_CCMR1_OC1M) | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
   *TIM4_CR1 |= TIM_CR1_CEN;
}

int main(void)
{
	   // Initialisiere den GPIO-Port D und den Timer 4
	   init();

	   while (1)
	   {
	      // Warte auf den n√§chsten Takt
	      __asm("wfi");
	   }

   return 0;
}

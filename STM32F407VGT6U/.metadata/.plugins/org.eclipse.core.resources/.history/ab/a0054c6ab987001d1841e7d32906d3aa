/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Waldemar Schneider
 * @brief          : Vier LED's
 ******************************************************************************
 * @attention
 *
 * Dieses Programm schaltet alle vier LED's auf dem Discovery Board ein!
 *
 ******************************************************************************
 */

#include <stdio.h>
#include <stdint.h>


#define RCC_AHB1ENR (*(volatile uint32_t*) 0x40023830)
#define RCC_APB1ENR (*(volatile uint32_t*) 0x40023840)
#define RCC_AHB1ENR_GPIODEN (1 << 3)
#define RCC_APB1ENR_TIM4EN (1 << 2)
#define GPIOD_MODER ((volatile uint32_t*) 0x40020C00)
#define TIM4_CR1 ((volatile uint32_t*) 0x40000800)
#define TIM_CR1_CEN (1 << 0)
#define TIM4_PSC ((volatile uint32_t*) 0x40000804)
#define TIM4_ARR ((volatile uint32_t*) 0x40000824)
#define TIM4_CCR1 ((volatile uint32_t*) 0x40000834)
#define TIM4_CCMR1 ((volatile uint32_t*) 0x40000820)
#define TIM_CCMR1_OC1M_1 (1 << 4)
#define TIM_CCMR1_OC1M_2 (1 << 5)

int main(void)
{
   // Aktiviere den Clock für den GPIO-Port D und den Timer 4
   RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN;
   RCC_APB1ENR |= RCC_APB1ENR_TIM4EN;

   // Konfiguriere den Pin 12 des GPIO-Ports D als Ausgang
   *GPIOD_MODER = (*GPIOD_MODER & ~(0x3 << (12 * 2))) | (0x1 << (12 * 2));

   // Deaktiviere den Timer 4
   *TIM4_CR1 &= ~TIM_CR1_CEN;

   // Setze den Prescaler für den Timer 4 auf 8399 (für eine Frequenz von 1 kHz)
   *TIM4_PSC = 8399;

   // Setze das Auto-Reload-Register für den Timer 4 auf 999 (für eine Pulsweite von 1 ms)
   *TIM4_ARR = 999;

   // Setze den Compare-Register 1 für den Timer 4 auf 499 (für eine Pulsweite von 500 ms)
   *TIM4_CCR1 = 499;

   // Setze den Capture/Compare Mode 1 für den Timer 4 auf PWM Mode 1 (PWM1)
   *TIM4_CCMR1 = (*TIM4_CCMR1 & ~TIM_CCMR1_OC1M) | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;

   // Aktiviere den Timer 4
   *TIM4_CR1 |= TIM_CR1_CEN;

   while (1)
   {
      __asm("wfi");
   }
}
